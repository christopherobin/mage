var util = require('util');
var Service = require('../../service').Service;
var ServiceNode = require('../../node').ServiceNode;

var mage = require('../../../mage');
var isCluster = mage.core.processManager.isMaster || mage.core.processManager.isWorker;

/**
 *
 * @param {string} name                  The name of the service
 * @param {string} type                  The protocol used (eg: tcp)
 * @param {Object} options               Options
 * @param {string} options.description   Used to override the service name generated by the engine.
 *                                       It needs to be unique on the network!
 * @constructor
 */
function SingleService(name, type, options) {
	this.name = name;
	this.type = type;
	this.options = options;

	this.services = {};
	this.isBrowsing = false;
}

util.inherits(SingleService, Service);

SingleService.prototype.announce = function (port, metadata, cb) {

	var node = new ServiceNode('localhost', port, ['127.0.0.1', '::1'], metadata);
	this.services[port] = node;

	if (!this.isBrowsing) {
		return cb();
	}

	var that = this;
	process.nextTick(function () {
		that.emit('up', node);
	});

	cb();
};

SingleService.prototype.discover = function () {
	this.isBrowsing = true;

	Object.keys(this.services).forEach(function (key) {
		this.emit('up', this.services[key]);
	}, this);
};

exports.create = function (name, type, options) {
	if (isCluster) {
		var error = new Error('Cannot use the single-server service discovery engine in cluster mode.');
		throw error;
	}

	return new SingleService(name, type, options);
};
