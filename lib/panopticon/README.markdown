# Panopticon

## Introduction

Panopticon is a node.js utility to aggregate samples generated by a node.js
application. It works in regular, single instance applications as well as
applications that make use of the `cluster` core module. Samples generated
by all processes are sent to the master process and emitted so that the
aggregated data may be used.

In order to minimise parsing load due to interprocess communication, data is
sub-aggregated on each machine for an interval, and then forwarded to the master
for final aggregation, reducing the parsing load to a single object per machine
per instance, rather than parsing a small object for every sample taken.

## Usage

Panopticon is loaded as a regular module. It should be loaded after a cluster
has been established if the `cluster` module is being used. In that case, the
master must have code to make use of the data aggregated by Panopticon. When a
Each n.5 interval (approximately), Panopticon will emit a dataset.

```javascript
if (cluster.isMaster) {
	panopticon.on('delivery', function (aggregatedData) {
		// Do something with aggregatedData
	});
}
```

Sending Panopticon data is extremely simple. By defaut, the master and every
worker have their PIDs logged. Everything else is sent to Panopticon using on of
its three `exports` functions, `set`, `inc` and `sample`. In every case, `id` is
a string that you want to have as a field name in the sub-object for each worker
logging.

 - `panopticon.set(id, n)`, where 'n', a finite number, replaces.
 - `panopticon.set(id, n)`, where 'n' is added to the previous value is 'n' is
a finite number, replaces. If `n` is not a finite number, then it defaults to 1.
 - `panopticon.sample(id, n)` Keeps track of the max, min, average and standard
 deviation of `n` over an interval.

 At the end of each interval a worker subobject is reinitialised to just contain
 its PID.

 ## Bugs
 At the time of writing, there is a bug in the node.js implementation of
 setTimeout which can lead to a the timeOut occuring early. If this happens,
 logging of a worker or master may stop until a sample command restarts the
 timeout.